[project]
name = "dove"
version = "0.1.0"
description = "An extensible Python library for modeling multi-commodity dispatch of energy systems."
readme = "README.md"
requires-python = ">=3.11"
authors = [
    { name = "Dylan McDowell", email = "dylan.mcdowell@inl.gov" },
    { name = "Paul Talbot", email = "paul.talbot@inl.gov"}
]
classifiers = [
    "License :: OSI Approved :: Apache Software License",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Mathematics",
    "Intended Audience :: Science/Research"
 ]


dependencies = [
    "numpy>=2.2.5",
    "pandas>=2.2.3",
    "pyomo>=6.9.2",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.uv]
managed = true

[tool.ruff]
indent-width = 4
line-length = 100
extend-exclude = ["tests/pyomo_tests/*.py"]

[tool.ruff.format]
indent-style = "space"
quote-style = "double"
line-ending = "auto"

[tool.ruff.lint]
select = [
    "E",    # pycodestyle errors (whitespace, indentation, etc.)
    "W",    # pycodestyle warnings
    "F",    # Pyflakes (undefined names, unused imports)
    "B",    # flake8-bugbear (likely bugs, dangerous patterns)
    "I",    # isort (import order and grouping)
    "UP",   # pyupgrade (use modern Python features)
    "C90",  # mccabe (complexity)
    "SIM",  # flake8-simplify (unnecessary code, simplifications)
    "ARG",  # flake8-unused-arguments
    "DTZ",  # flake8-datetimez (timezone-aware datetimes)
    "A",    # flake8-builtins (shadowing built-in names)
    "ANN",  # flake8-annotations (missing type annotations)
    "C4",   # flake8-comprehensions (unnecessary comprehensions)
    "TC",   # flake8-type-checking (type checking)
    "PL",   # pylint (select subset, see below)
    # "DOC",  # pydoclint
    # "D",    # pydocstyle
]
ignore = ["ANN401", "E402", "E501", "W505"]

[tool.ruff.lint.mccabe]
max-complexity = 12

[tool.ruff.lint.per-file-ignores]
"{tests,examples}/**"=[
    'ANN', # flake8-annotations
    'PLR2004', # magic value used in comparison
]

[tool.pytest.ini_options]
minversion = "8.3.5"
testpaths = ["tests/unit", "tests/integration"]
log_cli_level = "INFO"
xfail_strict = true
addopts = ["-ra", "--strict-config", "--strict-markers"]
filterwarnings = ["error"]
markers = [
    "unit: Marks tests as unit tests, to be run before integration tests",
    "integration: Marks tests as integration tests, to be run after unit tests"
]

[tool.mypy]
exclude = [
    "tests/pyomo_tests",
    "tests/test_*.py",
    "examples",
]
plugins = "numpy.typing.mypy_plugin"
strict = true
warn_unreachable = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]

[tool.codespell]
skip = './docs/build,./tests/pyomo_tests'
count = true
quiet-level = 3

[tool.commitizen]
name = "cz_conventional_commits"
version_provider = "pep621"
tag_format = "v$version"
version_files = [
    "pyproject.toml:version",
    "docs/conf.py:release"
]
update_changelog_on_bump = true

[dependency-groups]
dev = [
    "codespell>=2.4.1",
    "commitizen>=4.7.1",
    "mypy>=1.15.0",
    "myst-parser>=4.0.1",
    "pandas-stubs>=2.2.3.250308",
    "pre-commit>=4.2.0",
    "pytest>=8.3.5",
    "pytest-cov>=6.1.1",
    "sphinx>=8.2.3",
    "sphinx-autodoc-typehints>=3.2.0",
    "sphinx-book-theme>=1.1.4",
    "sphinx-copybutton>=0.5.2",
]
